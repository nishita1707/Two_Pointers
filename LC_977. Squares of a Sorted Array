#Problem 

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

#Solution ------------------------------------------------------------
#Approach
The logic here is that the array is already sorted and
We are comparing the first and last elements because after square these have the possibility of being the highest element.
Both the extremes contain the max element (after square ofc), so we are inserting these elements to the last of the new array to make it sorted.

#Complexity
Time complexity: O(n)

Space complexity: O(n)

#Code
class Solution {
    public int[] sortedSquares(int[] nums) {
        
       int n = nums.length;
       int ans[] = new int[n];
       int left = 0;
       int right = n-1;
       for(int i=n-1;i>=0;i--){
         if(Math.abs(nums[left]*nums[left])<Math.abs(nums[right]*nums[right])){
           ans[i] = Math.abs(nums[right]*nums[right]);
           right--;
         }else{
           ans[i] = Math.abs(nums[left]*nums[left]);
           left++;
         }
       }
       return ans;
    }
}
